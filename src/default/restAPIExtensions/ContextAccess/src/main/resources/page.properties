#The technical name of the REST API extension
#Must be URL compliant (alpha-numeric characters with no whitespace) and be prefixed by "custompage_"
name=custompage_ContextAccess

#Name displayed in the Portal
displayName=Rest Context

#Description displayed in the Portal
description=REST Context to access all informations of a case/task

#Must be apiExtension for a REST API extension
contentType=apiExtension

#Declare at least one API extension here (comma-separated list)
apiExtensions=ContextAccess


# 2.0 Access :
#			•BDM variables
#			•when the case is archived, access data
#			•thanks to Kilian, modify the Date format output

# * 2.1 Remove the BDM dependency in POM.XML

# * 2.2 This version works in a BonitaCommunity / Fix the boolean field in a BDM

# * 2.3 An Java numerate is handle and the list of value is returned When a BDM is null, Rest Context handle it and return the value with a null.
#		Only limit : if you have a List of BDM and in the list, a null :
#		List[ 0 ] = ClientDAO.newInstance()
#		List[ 1 ] = null
#		List[ 2 ] = ClientDAO.newInstance()
#		List[ 3 ] = ClientDAO.newInstance()
#		In this situation, the engine return an exception (when RestAPIContext ask the list of BDM) and this situation is not handle by the RestAPI Context

# * 2.4 manage dates as timestamp to manage the TimeZone for the DatePicker
#		Correct a bug on "Templist"

#* 2.5 New parameters the dateformat parameters : 
# * 		dateformat=DATEJSON to return a date in JSON (to be usefull with the Widget DateTime),
# * 		dateformat=DATETIME return a JSON date + time
# *      dateformat=DATELONG return a the date as a long (TimeStamp) to be compatible with the widget DatePicker[UIDesigner]. This is the default value  
# return document
# add context in the result (context group caseid, taskid, userid, username, isAdministrator, processdefinitionid,isProcessInstanciation)


# 2.6 Accept url parameter
#      return context.isTask / context.isOverview based on the URL parameter value
#      in case of instantiation, return the document variable empty (if context ask for anyvalue like '*').
#      return parameters (+ value) in the result
#      
#      
# return context.isTask / context.isOverview based on the URL parameter value
# in case of instantiation, return the document variable empty (if context ask for anyvalue like '*').
# return parameters (+ value) in the result
#--------------------------------- Url Parameter
#To set the URL in the RestAPi Context, do the following:
#- Create a Javascript variable "getUrl"
#- give the Javascript : 
#        var urlPath = window.location.pathname;
#        var urlPathEncode = encodeURI(urlPath);
#        return urlPathEncode;
#
#- in the RESTAPI CONTEXT, give this information:
#   ../API/extension/context?taskId={{taskId}}&processId={{taskId}}&caseId={{taskId}}&url={{getUrl}}
#
# (assuming taskId is a variable "URL parameter" / value= "id"
# Nota : BonitaPortal give in the URL parameter ID different ID : this is the TASK ID of the task in the task execution, the caseId in the overviewcase, and the processId in the process instantiation
# The result is then
# "context": {
#        "isTaskExecution": false,
#        "isProcessInstanciation": true,
#        "isProcessOverview": false,
#        "isAdministrator": true,
# 
# ------------------------------ Document
# In the instantiation form, when a document exist, return it empty. This information is needed for the FileUploadWidgetPlus
# 
# ------------------------------ Parameters
# If requested (context required all like '*') then the process parameters are returned with the value.
# Else, return can be done only when requested
#
# 
#    DateTime is now new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")


# 2.7 Document permission
#
# Permission on parameters : in the pilot, the parameter has to be declare (else the "*":"*" return all parameters)
# 	pilot on parameter : it's possible to declare "paramcontext" as a parameters, and give a context. Then, this context is use.
# 		Priority is 
# 			- localcontext
# 			- globalcontext
# 			- paramcontext
# 		Two advantages to use the paramcontext : 1/ it's not use any variable memory, 2/ it's available at the instantiation, for example to protect the access on some parameters.
#
#   Dateformat configuration (Kilian Stein )
#      
#   AccessRight : Check if user can access to what he asks
# Fix : 
#	dateFormat bug (Kilian Stein )
	
# 2.8 Ready for 7.5
#    Faster
#    Fix bug in the Document Access
#    in a sub process, search the Pilot in the sub process OR the root process 
#    7.5 ready and accept the new java.time.LocalDate date, and return the data correctly for the 7.5 new Bonita Widget
#
#

#For each declared API extension,  specify the
#following properties: method,pathTemplate,classFileName and permissions

#Specify one HTTP verb from GET|POST|PUT|PATCH|DELETE|HEAD|OPTIONS|TRACE
#GET is the recommended value for a REST API extension.
#Write operations should be performed by a process.
ContextAccess.method=GET

#Define the URL path template
#Resulting URL: ../API/extension/context
# like http://localhost:8080/bonita/API/extension/context?caseId=2001
ContextAccess.pathTemplate=context

#Declare the associated RestAPIController Groovy file
ContextAccess.classFileName=org/bonitasoft/rest/context/RestContextHandleGet.groovy

#Declare the permissions list (comma-separated list)
#For each permission declared, you must map it either to a profile (for example User, Administrator, or a custom profile) or to a specific user.
#Edit ${bonita.home}/client/tenants/${tenant_id}/conf/custom-permissions-mapping.properties.
#For example: user|john=[context] or profile|User=[context]
#In production, restart the web server to apply the changes.
#In the studio, you just have to logout/login to apply the changes.
ContextAccess.permissions=task_visualization
